var GreetingForm = React.createClass({
    getInitialState: function () {
        return {name: ''};
    },
    handleNameChange: function (e) {
        this.setState({name: e.target.value});
    },
    handleSubmit: function (e) {
        e.preventDefault();
        var name = this.state.name.trim();
        if(!name) { return; }
        this.props.onGreetingSubmit({name: name});
        this.setState({name: ''});
    },
    render: function () {
        return (
            <form className="greetingForm" onSubmit={this.handleSubmit}>
                <div className="col-sm-3">
                    <input
                        type="text"
                        placeholder="Your name"
                        className="form-control"
                        name="name"
                        value={this.state.name}
                        onChange={this.handleNameChange}
                    />
                </div>
                <input type="submit" value="Post Name" className="btn btn-primary" />
            </form>
        )
    }
});

var Greeting = React.createClass({
    render: function() {
        return (
            <div className="greeting">
                <h2 className="greetingAuthor">
                    {this.props.author}
                    {this.props.text}
                    {this.props.timestamp}
                </h2>
            </div>
        );
    }
});


var GreetingList = React.createClass({
    render: function() {
        var greetingNodes = this.props.data.map(function(greeting) {
            return (
                <Greeting text={greeting.author} key={greeting.timestamp}>
                    {greeting.text}
                </Greeting>
            );
        });

        return (
            <div className="greeting">
                {greetingNodes}
            </div>
        );
    }
});

var GreetingBox = React.createClass({
    loadGreetingFromServer: function() {
        console.log("Getting Greetings");
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            cache: false,
            success: function(data) {
                this.setState({data: data});
            }.bind(this),
            error: function(xhr, status, err) {
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    handleGreetingSubmit: function(greetingRequest) {
        var greetings = this.state.data;
        // Optimistically set an id on the new comment. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // not use Date.now() for this and would have a more robust system in place.
        greetingRequest.timestamp = Date.now();
        var newGreetings = greetings.concat([greetingRequest]);
        this.setState({data: newGreetings});
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            type: 'POST',
            data: greetingRequest,
            success: function(data) {
                this.setState({data: data});
            }.bind(this),
            error: function(xhr, status, err) {
                this.setState({data: greetings});
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    getInitialState: function() {
        return {data: []};
    },
    componentDidMount: function() {
        this.loadGreetingFromServer();
        setInterval(this.loadCommentsFromServer, this.props.pollInterval);
    },
    render: function() {
        return (
            <div className="greetingBox">
                <h1>Greetings!</h1>
                <GreetingList data={this.state.data} />
                <GreetingForm onGreetingSubmit={this.handleGreetingSubmit} />
            </div>
        );
    }
});

ReactDOM.render(
    <GreetingBox url="/api/greeting" pollInterval={2000} />,
    document.getElementById('content')
);